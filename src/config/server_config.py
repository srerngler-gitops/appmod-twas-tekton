# wsadmin script generated by binaryAppScanner
# This configuration was migrated on 2020-10-12 at 12:40:36 from the following location: /opt/IBM/WebSphere/AppServer/profiles/AppSrv01
# The binary scanner does not support the migration of all WebSphere traditional configuration elements. Check the binary scanner documentation for the list of supported configuration elements.

Cell=AdminConfig.getid('/Cell:' + AdminControl.getCell() + '/')
Node=AdminConfig.getid('/Cell:' + AdminControl.getCell() + '/Node:' + AdminControl.getNode() + '/')
Server=AdminConfig.getid('/Cell:' + AdminControl.getCell() + '/Node:' + AdminControl.getNode() + '/Server:server1')
NodeName=AdminControl.getNode()

# The following variables are used to replace sensitive data in the configuration for the application.
# The values for these variables were not collected because the includeSensitiveData option was not specified.
# ============================================================
Default01Node_cells_Default01Cell_nodes_Default01Node_node_xml_Node_1_DBUser_password_1='db2inst1'
# ============================================================

print 'Starting Creating JVM Properties'
# Properties are migrated from server Default01Node/server1.
AdminTask.setJVMProperties(Server, ["-maximumHeapSize", "0", "-classpath", '["{}"]'])
AdminTask.setJVMSystemProperties(["-propertyName", "com.ibm.ws.management.event.pull_notification_timeout", "-propertyValue", "120000"])

print 'Starting Creating Authentication Alias'
GlobalSecurityVar=AdminConfig.getid('/Cell:' + AdminControl.getCell() + '/' + 'Security:/')
AdminConfig.create('JAASAuthData', GlobalSecurityVar, [['userId', 'db2inst1'], ['description', ''], ['password', Default01Node_cells_Default01Cell_nodes_Default01Node_node_xml_Node_1_DBUser_password_1], ['alias', 'Default01Node(cells/Default01Cell/nodes/Default01Node|node.xml#Node_1)DBUser']])

print 'Starting Creating Queues'

print 'Starting Creating Topics'

print 'Starting Creating Activation Specifications'

print 'Starting Creating Connection Factories'

print 'Starting Creating JDBC Providers'
AdminConfigVar_0=AdminConfig.create('JDBCProvider', Node, [['name', 'DB2_Using_IBM_JCC_Driver_(XA)'], ['implementationClassName', 'com.ibm.db2.jcc.DB2XADataSource'], ['providerType', 'DB2 Using IBM JCC Driver (XA)'], ['description', 'Two-phase commit DB2 JCC provider that supports JDBC 4.0 using the IBM Data Server Driver for JDBC and SQLJ. IBM Data Server Driver is the next generation of the DB2 Universal JCC driver. Data sources created under this provider support the use of XA to perform 2-phase commit processing. Use of JDBC driver type 2 on WebSphere Application Server for Z/OS is not supported for data sources created under this provider. This provider is configurable in version 7.0 and later nodes.'], ['classpath', '${DB2_JCC_DRIVER_PATH}/db2jcc4.jar;${UNIVERSAL_JDBC_DRIVER_PATH}/db2jcc_license_cu.jar;${DB2_JCC_DRIVER_PATH}/db2jcc_license_cisuz.jar'], ['xa', 'true']])
AdminConfigVar_1=AdminTask.createDatasource(AdminConfigVar_0, ["-name", "OrderDS", "-jndiName", "jdbc/orderds", "-dataStoreHelperClassName", "com.ibm.websphere.rsadapter.DB2UniversalDataStoreHelper", "-componentManagedAuthenticationAlias", "Default01Node(cells/Default01Cell/nodes/Default01Node|node.xml#Node_1)DBUser", "-configureResourceProperties", "[[databaseName java.lang.String ORDERDB] [driverType java.lang.Integer 4] [serverName java.lang.String db2.db2.svc] [portNumber java.lang.Integer 50000] ]"])
AdminConfigVar_2=AdminConfig.showAttribute(AdminConfigVar_1, 'propertySet')
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'beginTranForResultSetScrollingAPIs'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'beginTranForVendorAPIs'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'connectionSharing'], ['type', 'java.lang.String'], ['value', '1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'deferPrepares'], ['type', 'java.lang.Boolean'], ['value', 'true']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'enableClientInformation'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'enableMultithreadedAccessDetection'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'errorDetectionModel'], ['type', 'java.lang.String'], ['value', 'ExceptionMapping']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'freeResourcesOnClose'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'fullyMaterializeLobData'], ['type', 'java.lang.Boolean'], ['value', 'true']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'jmsOnePhaseOptimization'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'loginTimeout'], ['type', 'java.lang.Integer'], ['value', '0']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'name'], ['type', 'java.lang.String'], ['value', 'OrderDS']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'nonTransactionalDataSource'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'preTestSQLString'], ['type', 'java.lang.String'], ['value', 'SELECT CURRENT SQLID FROM SYSIBM.SYSDUMMY1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'readOnly'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'reauthentication'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'retrieveMessagesFromServerOnGetMessage'], ['type', 'java.lang.String'], ['value', 'true']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'traceFileAppend'], ['type', 'java.lang.Boolean'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'traceLevel'], ['type', 'java.lang.Integer'], ['value', '-1']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'unbindClientRerouteListFromJndi'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'useTransactionRedirect'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'validateNewConnection'], ['type', 'java.lang.String'], ['value', 'false']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'validateNewConnectionRetryCount'], ['type', 'java.lang.String'], ['value', '100']])
AdminConfig.create('J2EEResourceProperty', AdminConfigVar_2, [['name', 'validateNewConnectionRetryInterval'], ['type', 'java.lang.String'], ['value', '3']])
AdminConfigVar_3=AdminConfig.showAttribute(AdminConfigVar_1, 'connectionPool')
AdminConfig.modify(AdminConfigVar_3, [['stuckThreshold', '0'], ['reapTime', '180'], ['testConnectionInterval', '0'], ['connectionTimeout', '180'], ['surgeCreationInterval', '0'], ['surgeThreshold', '-1'], ['stuckTimerTime', '0'], ['numberOfFreePoolPartitions', '0'], ['minConnections', '1'], ['unusedTimeout', '1800'], ['agedTimeout', '0'], ['numberOfSharedPoolPartitions', '0'], ['purgePolicy', 'EntirePool'], ['maxConnections', '10'], ['freePoolDistributionTableSize', '0'], ['stuckTime', '0'], ['testConnection', 'false'], ['numberOfUnsharedPoolPartitions', '0']])

print 'Starting Creating Variables'
AdminTask.setVariable(['-scope', 'Node=' + NodeName, '-variableName', 'DB2_JCC_DRIVER_PATH', '-variableValue', '/work/config/lib'])
AdminTask.setVariable(['-scope', 'Node=' + NodeName, '-variableName', 'UNIVERSAL_JDBC_DRIVER_PATH', '-variableValue', '/work/config/lib'])

print 'Set JPA 2.0 and JAX-RS 1.1 (non-default versions)'
# Configuring JPA Specification
AdminTask.listSupportedJPASpecifications('[-versionOnly]')
AdminTask.showJPASpecLevel(Server)
AdminTask.modifyJPASpecLevel(Server, '[ -specLevel 2.0]')
AdminTask.showJPASpecLevel(Server)
# Configuring JAX-RS Specification
AdminTask.modifyJaxrsProvider(Server, '[ -provider 1.1]')

print 'Starting Saving Configuration Changes Before Application Deployment'
AdminConfig.save()
print 'Starting Application Deployment'
AdminConfig.create('Library', Server, [['name', 'globalSharedLibrary'], ['classPath',  '/work/config/lib']])
appServer = AdminConfig.list('ApplicationServer',Server)
classLoader1 = AdminConfig.create('Classloader', appServer, [['mode',  'PARENT_FIRST']])
AdminConfig.create('LibraryRef', classLoader1, [['libraryName', 'globalSharedLibrary']])
#AdminApp.install('/path/to/CustomerOrderServicesApp.ear', ["-node", NodeName, "-server", "server1", "-appname", "CustomerOrderServicesApp.ear"])
AdminConfig.save()
